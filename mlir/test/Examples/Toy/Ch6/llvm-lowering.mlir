// RUN: toyc-ch6 %s -emit=llvm -opt

// toy.func @main() {
//   %0 = toy.constant dense<[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]> : tensor<2x3xf64>
//   %2 = toy.transpose(%0 : tensor<2x3xf64>) to tensor<3x2xf64>
//   %3 = toy.mul %2, %2 : tensor<3x2xf64>
//   toy.print %3 : tensor<3x2xf64>
//   toy.return
// }

// toy.func @main() {
//   %0 = toy.constant dense<[[1.000000e+00, 2.000000e+00, 3.000000e+00], [4.000000e+00, 5.000000e+00, 6.000000e+00]]> : tensor<2x3xf64>
//   // %2 = toy.transpose(%0 : tensor<2x3xf64>) to tensor<3x2xf64>
//   // %3 = toy.mul %2, %2 : tensor<3x2xf64>
//   toy.print %0 : tensor<2x3xf64>
//   toy.return
// }

//delayOp example
// toy.func @main() {
//     %0 = toy.constant dense<[1.000000e+01, 2.000000e+01, 3.000000e+01, 4.000000e+01, 5.000000e+01, 6.000000e+01, 7.000000e+01, 8.000000e+01, 9.000000e+01, 1.000000e+02]> : tensor<10xf64>
//     %1 = toy.constant dense<2.000000e+00> : tensor<f64>
//     %2 = "toy.delay"(%0, %1) : (tensor<10xf64>, tensor<f64>) -> tensor<*xf64>
//     toy.print %2 : tensor<*xf64>
//     toy.return
// }


// toy.func @main() {
//     %0 = toy.constant dense<[1.000000e+01, 2.000000e+01, 3.000000e+01, 4.000000e+01, 5.000000e+01, 6.000000e+01, 7.000000e+01, 8.000000e+01, 9.000000e+01, 1.000000e+02, 1.100000e+02, 1.200000e+02, 1.300000e+02, 1.400000e+02, 1.500000e+02, 1.600000e+02, 1.700000e+02, 1.800000e+02, 1.900000e+02, 2.000000e+02, 2.100000e+02, 2.200000e+02, 2.300000e+02, 2.400000e+02, 2.500000e+02, 2.600000e+02, 2.700000e+02, 2.800000e+02, 2.900000e+02, 3.000000e+02, 3.100000e+02, 3.200000e+02, 3.300000e+02, 3.400000e+02, 3.500000e+02, 3.600000e+02, 3.700000e+02, 3.800000e+02, 3.900000e+02, 4.000000e+02, 4.100000e+02, 4.200000e+02, 4.300000e+02, 4.400000e+02, 4.500000e+02, 4.600000e+02, 4.700000e+02, 4.800000e+02, 4.900000e+02, 5.000000e+02, 5.100000e+02, 5.200000e+02, 5.300000e+02, 5.400000e+02, 5.500000e+02, 5.600000e+02, 5.700000e+02, 5.800000e+02, 5.900000e+02, 6.000000e+02, 6.100000e+02, 6.200000e+02, 6.300000e+02, 6.400000e+02, 6.500000e+02, 6.600000e+02, 6.700000e+02, 6.800000e+02, 6.900000e+02, 7.000000e+02, 7.100000e+02, 7.200000e+02, 7.300000e+02, 7.400000e+02, 7.500000e+02, 7.600000e+02, 7.700000e+02, 7.800000e+02, 7.900000e+02, 8.000000e+02, 8.100000e+02, 8.200000e+02, 8.300000e+02, 8.400000e+02, 8.500000e+02, 8.600000e+02, 8.700000e+02, 8.800000e+02, 8.900000e+02, 9.000000e+02, 9.100000e+02, 9.200000e+02, 9.300000e+02, 9.400000e+02, 9.500000e+02, 9.600000e+02, 9.700000e+02, 9.800000e+02, 9.900000e+02, 1.000000e+03]> : tensor<100xf64>
//     %1 = toy.constant dense<2.000000e+00> : tensor<f64>
//     %2 = "toy.delay"(%0, %1) : (tensor<100xf64>, tensor<f64>) -> tensor<*xf64>
//     toy.print %2 : tensor<*xf64>
//     toy.return
//   }

  dsp.func @main() {
    %0 = dsp.constant dense<[1.000000e+01, 2.000000e+01, 3.000000e+01, 4.000000e+01, 5.000000e+01, 6.000000e+01, 7.000000e+01, 8.000000e+01, 9.000000e+01, 1.000000e+02]> : tensor<10xf64>
    %1 = dsp.constant dense<2.000000e+00> : tensor<f64>
    %2 = dsp.constant dense<4.000000e+00> : tensor<f64>
    %3 = "dsp.delay"(%0, %1) : (tensor<10xf64>, tensor<f64>) -> tensor<*xf64>
    %4 = "dsp.delay"(%3, %2) : (tensor<*xf64>, tensor<f64>) -> tensor<*xf64>
    dsp.print %4 : tensor<*xf64>
    dsp.return
  }
// CHECK-LABEL: define void @main()
// CHECK: @printf
// CHECK-SAME: 1.000000e+00
// CHECK: @printf
// CHECK-SAME: 1.600000e+01
// CHECK: @printf
// CHECK-SAME: 4.000000e+00
// CHECK: @printf
// CHECK-SAME: 2.500000e+01
// CHECK: @printf
// CHECK-SAME: 9.000000e+00
// CHECK: @printf
// CHECK-SAME: 3.000000e+01
